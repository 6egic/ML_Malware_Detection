#!/usr/bin/env python

import pandas as pd

import sklearn
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn import cross_validation

MalwareDataset = pd.read_csv('MalwareRelatedData.csv', sep='|')
Innocent = MalwareDataset[0:41323].drop(['innocent'], axis=1)
Malware = MalwareDataset[41323::].drop(['innocent'], axis=1)


print('The number of important features is  %i \n' % Innocent.shape[1])
Data = MalwareDataset.drop(['Name', 'md5', 'innocent'], axis=1).values
Target = MalwareDataset['innocent'].values
FeatSelect = sklearn.ensemble.ExtraTreesClassifier().fit(Data, Target)
Model = SelectFromModel(FeatSelect, prefit=True)
Data_new = Model.transform(Data)
print (Data.shape)
print (Data_new.shape)

Innocent_Train, Innocent_Test, Malware_Train, Malware_Test = cross_validation.train_test_split(Data_new, Target ,test_size=0.2)  

clf =  sklearn.ensemble.RandomForestClassifier(n_estimators=50)
clf.fit(Innocent_Train, Malware_Train)

score = clf.score(Innocent_Test, Malware_Test)
print("The score of Random Forest Algorithm is," score*100)

Result = clf.predict(Innocent_Test)
CM = confusion_matrix(Malware_Test, Result)
print("False positive rate : %f %%" % ((CM[0][1] / float(sum(CM[0])))*100)) print('False negative rate : %f %%' % ( (CM[1][0] / float(sum(CM[1]))*100)))

